1.Базовый класс для всех вариантов. 
class Figure
{
  int c; // цвет
  bool visible;
protected:
  int x,y; // базовая точка
  virtual void draw() const; 
public:
  Figure(int c, int x, int y);
  ~Figure(); 
  void move(int dx, int dy); // сместить фигуру на (dx,dy) – только видимую
  void setBorderColor(int c); // установить цвет фигуры – только видимой
  int getBorderColor() const; // получить цвет
  void setVisible( bool isVisible = true );    // показать/спрятать фигуру
  bool isVisible() const; // признак видимости
  virtual void calcParams( float& perimeter, float& area ) const;
                 // вычислить периметр и площадь фигуры
};
2.Выполнить:

    Реализацию методов класса Figure.

    Скорректировать интерфейс Figure, чтобы методы calcParams и draw стали чисто виртуальными.

    Определить производный класс (в соответствии с вариантом задания).

    Определить дополнительный метод в производном классе для изменения размеров:

              void setSizes(длина, высота);
              или void setSizes(длина, высота, радиус);
              или void setSizes(радиус, угол1, угол2);
              и т.д., (т.е. задавать значения, указываемые в аргументах конструктора, начиная с 4-го )


    От написанного класса произвести новый дочерний класс - закрашенная фигура.
    Например, закрашенный ромб (FilledRomb ← Romb ← Figure).

    Добавить к параметрам конструктора нового дочернего класса цвет заполнения.

    Определить дополнительный метод у нового дочернего класса для изменения цвета заполнения:

             void setFillColor(int c);


    Переопределить у нового дочернего класса метод изменения цвета границы:

            void setBorderColor(int c);

           (если новый цвет границы совпадает с текущим цветом заполнения, то цвет границы не изменять)


    Правильно реализовать деструкторы в родительских и всех производных классах (при необходимости скорректировать интерфейс базового класса).

    При тестировании объектов классов продемонстрировать полиморфизм (при необходимости скорректировать интерфейс базового класса).

    При тестировании динамически создать две фигуры 2 разных классов, вызвать все методы.
3.Подготовить отчет.

    Постановка задачи.

    Листинг описания класса (c комментариями ко всем свойствам и методам).

    Листинг реализации класса.

    Результаты работы программы проверки класса (какие действия выполнялись, какие результаты были получены).

